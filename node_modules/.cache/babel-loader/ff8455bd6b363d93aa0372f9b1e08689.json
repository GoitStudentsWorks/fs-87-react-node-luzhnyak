{"ast":null,"code":"import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { authReducer } from \"./auth/slice\";\nimport { waterReducer } from \"./waterConsumption/slice\";\nconst authConfig = {\n  key: \"auth\",\n  storage,\n  whitelist: [\"token\"]\n};\nconst rootReducer = combineReducers({\n  auth: persistReducer(authConfig, authReducer),\n  water: waterReducer\n});\nconst ignoredPersistenceActions = [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER];\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ignoredPersistenceActions\n    }\n  })\n});\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}","map":{"version":3,"names":["combineReducers","configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","authReducer","waterReducer","authConfig","key","whitelist","rootReducer","auth","water","ignoredPersistenceActions","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["D:/Web/aqua-frontend/src/redux/store.ts"],"sourcesContent":["import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { authReducer } from \"./auth/slice\";\r\nimport { waterReducer } from \"./waterConsumption/slice\";\r\n\r\nconst authConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"token\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: persistReducer(authConfig, authReducer),\r\n  water: waterReducer,\r\n});\r\n\r\nconst ignoredPersistenceActions = [\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: ignoredPersistenceActions,\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAElE,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AAEtB,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,YAAY,QAAQ,0BAA0B;AAEvD,MAAMC,UAAU,GAAG;EACjBC,GAAG,EAAE,MAAM;EACXJ,OAAO;EACPK,SAAS,EAAE,CAAC,OAAO;AACrB,CAAC;AAED,MAAMC,WAAW,GAAGhB,eAAe,CAAC;EAClCiB,IAAI,EAAEd,cAAc,CAACU,UAAU,EAAEF,WAAW,CAAC;EAC7CO,KAAK,EAAEN;AACT,CAAC,CAAC;AAEF,MAAMO,yBAAyB,GAAG,CAChCf,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,CACT;AAED,OAAO,MAAMW,KAAK,GAAGnB,cAAc,CAAC;EAClCoB,OAAO,EAAEL,WAAW;EACpBM,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAEN;IAClB;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMO,SAAS,GAAGxB,YAAY,CAACkB,KAAK,CAAC;;AAE5C;;AAEA"},"metadata":{},"sourceType":"module"}