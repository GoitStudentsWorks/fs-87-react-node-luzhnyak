{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\aqua-frontend\\\\src\\\\components\\\\MonthStatsTable\\\\MonthStatsTable.jsx\",\n  _s = $RefreshSig$();\nimport css from './MonthStatsTable.module.css';\n// import { ReactComponent as IconClose } from '../../images/icons/x-mark-outline.svg';\nimport { useState } from 'react';\nimport PopUpDay from './PopUpDay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MonthStatsTable = () => {\n  _s();\n  const [sDate, setsDate] = useState(new Date());\n  const [popUp, setsPopup] = useState(false);\n  const previous = '\\u003C';\n  const next = '\\u003E';\n  const findMonthDays = (y, m) => {\n    return new Date(y, m + 1, 0).getDate();\n  };\n\n  // const findFirstDay = (y, m) => {\n  //   return new Date(y, m, 1).getDay();\n  // };\n  //   const showPopup = () => {\n  //     const showPopUp = []\n  // showPopUp.push(\n  // <div>\n  //  <div className={css.popUp}>\n  // {`${sDate.toLocaleDateString('en-US', {\n  //         day: 'numeric',\n  //       })},\n  //        ${sDate.toLocaleDateString('en-US', {\n  //         month: 'long',\n  //       })}`}\n  //       <button className={css['popup-close']} onClick={handleCloseClick}></button>\n  //       <p>Daily norma:</p>\n  //       <p>Fulfillment of the daily norm:</p>\n  //       <p>How many servings of water:</p>\n  //     </div>\n  //     </div>\n  //  )\n  //  return showPopUp\n  //   }\n\n  const changeToPrevMonth = () => {\n    setsDate(pDate => {\n      const pMonth = pDate.getMonth() - 1;\n      const pYear = pDate.getFullYear();\n      return new Date(pYear, pMonth);\n    });\n  };\n  const changeToNextMonth = () => {\n    setsDate(pDate => {\n      const nMonth = pDate.getMonth() + 1;\n      const nYear = pDate.getFullYear();\n      return new Date(nYear, nMonth);\n    });\n  };\n  const handleDateClick = date => {\n    setsDate(date);\n    setsPopup(true);\n  };\n  const handleCloseClick = () => {\n    setsPopup(false);\n  };\n  const showCalendar = () => {\n    // const currDate = new Date();\n    const y = sDate.getFullYear();\n    const m = sDate.getMonth();\n    const mDays = findMonthDays(y, m);\n    // const fDay = findFirstDay(y, m);\n    const allDays = [];\n\n    // For empty cells\n    // for (let p = 0; p < fDay; p++) {\n    //   allDays.push(<div key={`em-${p}`} className=\"box empty\"></div>);\n    // }\n\n    // Show actual days\n    for (let d = 1; d <= mDays; d += 1) {\n      const date = new Date(y, m, d);\n      // const isSelected = sDate && date.toDateString() === sDate.toDateString();\n\n      allDays.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css['day-cell'],\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: css.day\n          //   className={`box ${isSelected ? 'selected' : ''}`}\n          ,\n          onClick: () => handleDateClick(date),\n          children: d\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: css.percent,\n          children: \" 100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, `d-${d}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this));\n    }\n    return allDays;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css['calendar-container'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: css['calendar-header'],\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: css.title,\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.monthPicker,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: css['btn-arrow'],\n          onClick: changeToPrevMonth,\n          children: previous\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: css['title-month'],\n          children: `${sDate.toLocaleString('en-US', {\n            month: 'long'\n          })}, \n            ${sDate.toLocaleString('en-US', {\n            year: 'numeric'\n          })}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: css['btn-arrow'],\n          onClick: changeToNextMonth,\n          children: [' ', next, ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css['calendar-table'],\n      children: [popUp && /*#__PURE__*/_jsxDEV(PopUpDay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }, this), showCalendar(), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthStatsTable, \"3enjew9Ud2Hf3W+G/jdaeOUtcAc=\");\n_c = MonthStatsTable;\nvar _c;\n$RefreshReg$(_c, \"MonthStatsTable\");","map":{"version":3,"names":["css","useState","PopUpDay","jsxDEV","_jsxDEV","MonthStatsTable","_s","sDate","setsDate","Date","popUp","setsPopup","previous","next","findMonthDays","y","m","getDate","changeToPrevMonth","pDate","pMonth","getMonth","pYear","getFullYear","changeToNextMonth","nMonth","nYear","handleDateClick","date","handleCloseClick","showCalendar","mDays","allDays","d","push","className","children","day","onClick","fileName","_jsxFileName","lineNumber","columnNumber","percent","title","monthPicker","toLocaleString","month","year","_c","$RefreshReg$"],"sources":["D:/Web/aqua-frontend/src/components/MonthStatsTable/MonthStatsTable.jsx"],"sourcesContent":["import css from './MonthStatsTable.module.css';\r\n// import { ReactComponent as IconClose } from '../../images/icons/x-mark-outline.svg';\r\nimport { useState } from 'react';\r\nimport PopUpDay from './PopUpDay';\r\n\r\nexport const MonthStatsTable = () => {\r\n  const [sDate, setsDate] = useState(new Date());\r\n  const [popUp, setsPopup] = useState(false);\r\n\r\n  const previous = '\\u003C';\r\n  const next = '\\u003E';\r\n  const findMonthDays = (y, m) => {\r\n    return new Date(y, m + 1, 0).getDate();\r\n  };\r\n\r\n  // const findFirstDay = (y, m) => {\r\n  //   return new Date(y, m, 1).getDay();\r\n  // };\r\n  //   const showPopup = () => {\r\n  //     const showPopUp = []\r\n  // showPopUp.push(\r\n  // <div>\r\n  //  <div className={css.popUp}>\r\n  // {`${sDate.toLocaleDateString('en-US', {\r\n  //         day: 'numeric',\r\n  //       })},\r\n  //        ${sDate.toLocaleDateString('en-US', {\r\n  //         month: 'long',\r\n  //       })}`}\r\n  //       <button className={css['popup-close']} onClick={handleCloseClick}></button>\r\n  //       <p>Daily norma:</p>\r\n  //       <p>Fulfillment of the daily norm:</p>\r\n  //       <p>How many servings of water:</p>\r\n  //     </div>\r\n  //     </div>\r\n  //  )\r\n  //  return showPopUp\r\n  //   }\r\n\r\n  const changeToPrevMonth = () => {\r\n    setsDate(pDate => {\r\n      const pMonth = pDate.getMonth() - 1;\r\n      const pYear = pDate.getFullYear();\r\n      return new Date(pYear, pMonth);\r\n    });\r\n  };\r\n\r\n  const changeToNextMonth = () => {\r\n    setsDate(pDate => {\r\n      const nMonth = pDate.getMonth() + 1;\r\n      const nYear = pDate.getFullYear();\r\n      return new Date(nYear, nMonth);\r\n    });\r\n  };\r\n\r\n  const handleDateClick = date => {\r\n    setsDate(date);\r\n    setsPopup(true);\r\n  };\r\n  const handleCloseClick = () => {\r\n    setsPopup(false);\r\n  };\r\n\r\n  const showCalendar = () => {\r\n    // const currDate = new Date();\r\n    const y = sDate.getFullYear();\r\n    const m = sDate.getMonth();\r\n    const mDays = findMonthDays(y, m);\r\n    // const fDay = findFirstDay(y, m);\r\n    const allDays = [];\r\n\r\n    // For empty cells\r\n    // for (let p = 0; p < fDay; p++) {\r\n    //   allDays.push(<div key={`em-${p}`} className=\"box empty\"></div>);\r\n    // }\r\n\r\n    // Show actual days\r\n    for (let d = 1; d <= mDays; d += 1) {\r\n      const date = new Date(y, m, d);\r\n      // const isSelected = sDate && date.toDateString() === sDate.toDateString();\r\n\r\n      allDays.push(\r\n        <div className={css['day-cell']} key={`d-${d}`}>\r\n          <button\r\n            className={css.day}\r\n            //   className={`box ${isSelected ? 'selected' : ''}`}\r\n            onClick={() => handleDateClick(date)}\r\n          >\r\n            {d}\r\n          </button>\r\n          <p className={css.percent}> 100%</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return allDays;\r\n  };\r\n\r\n  return (\r\n    <div className={css['calendar-container']}>\r\n      <div className={css['calendar-header']}>\r\n        <h2 className={css.title}>Month</h2>\r\n        <div className={css.monthPicker}>\r\n          <button className={css['btn-arrow']} onClick={changeToPrevMonth}>\r\n            {previous}\r\n          </button>\r\n          <h2 className={css['title-month']}>\r\n            {`${sDate.toLocaleString('en-US', {\r\n              month: 'long',\r\n            })}, \r\n            ${sDate.toLocaleString('en-US', {\r\n              year: 'numeric',\r\n            })}`}\r\n          </h2>\r\n          <button className={css['btn-arrow']} onClick={changeToNextMonth}>\r\n            {' '}\r\n            {next}{' '}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={css['calendar-table']}>\r\n        {popUp && <PopUpDay />}\r\n        {showCalendar()}{' '}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}