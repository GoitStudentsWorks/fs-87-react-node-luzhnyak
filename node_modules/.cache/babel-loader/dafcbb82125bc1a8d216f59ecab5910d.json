{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addWater, deleteWaterById, getAllWaterForToday, updateWaterById, getAllWaterForMonth } from \"../../services/waterApi\";\nimport { handleApiError } from \"../../services/handleApiError\";\nexport const addWaterThunk = createAsyncThunk(\"water/addWater\", async (newWater, thunkApi) => {\n  try {\n    const response = await addWater(newWater);\n    // const response = await addWater({ newWater: newWater, date: Date.now() });\n    return response;\n  } catch (error) {\n    const errorObj = handleApiError(error);\n    return thunkApi.rejectWithValue(errorObj);\n  }\n});\nexport const deleteWaterThunk = createAsyncThunk(\"water/deleteWater\", async (entryId, thunkApi) => {\n  const {\n    water\n  } = thunkApi.getState();\n  if (water.today === null) return;\n  const _id = water.today._id;\n  try {\n    const response = await deleteWaterById(_id, entryId);\n    return response;\n  } catch (error) {\n    const errorObj = handleApiError(error);\n    return thunkApi.rejectWithValue(errorObj);\n  }\n});\nexport const updateWaterByIdThunk = createAsyncThunk(\"water/updateEntryWater\", async (data, thunkApi) => {\n  const {\n    entryId,\n    body\n  } = data;\n  const {\n    water\n  } = thunkApi.getState();\n  if (water.today === null) return;\n  const _id = water.today._id;\n  try {\n    const response = await updateWaterById(_id, entryId, body);\n    return response;\n  } catch (error) {\n    const errorObj = handleApiError(error);\n    return thunkApi.rejectWithValue(errorObj);\n  }\n});\nexport const getAllWaterForTodayThunk = createAsyncThunk(\"water/getTodayWater\", async (_, thunkApi) => {\n  try {\n    const response = await getAllWaterForToday();\n    return response;\n  } catch (error) {\n    const errorObj = handleApiError(error);\n    return thunkApi.rejectWithValue(errorObj);\n  }\n});\nexport const getAllWaterForMonthThunk = createAsyncThunk(\"water/getMonthWater\", async (data, thunkApi) => {\n  const {\n    year,\n    month\n  } = data;\n  try {\n    const response = await getAllWaterForMonth(year, month);\n    return response;\n  } catch (error) {\n    const errorObj = handleApiError(error);\n    return thunkApi.rejectWithValue(errorObj);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","addWater","deleteWaterById","getAllWaterForToday","updateWaterById","getAllWaterForMonth","handleApiError","addWaterThunk","newWater","thunkApi","response","error","errorObj","rejectWithValue","deleteWaterThunk","entryId","water","getState","today","_id","updateWaterByIdThunk","data","body","getAllWaterForTodayThunk","_","getAllWaterForMonthThunk","year","month"],"sources":["D:/Web/aqua-frontend/src/redux/waterConsumption/operations.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  addWater,\r\n  deleteWaterById,\r\n  getAllWaterForToday,\r\n  updateWaterById,\r\n  getAllWaterForMonth,\r\n} from \"../../services/waterApi\";\r\nimport { handleApiError } from \"../../services/handleApiError\";\r\n\r\nimport { RootState } from \"../store\";\r\nimport { IDdailyEntry } from \"../../types\";\r\n\r\nexport const addWaterThunk = createAsyncThunk(\r\n  \"water/addWater\",\r\n  async (newWater: IDdailyEntry, thunkApi) => {\r\n    try {\r\n      const response = await addWater(newWater);\r\n      // const response = await addWater({ newWater: newWater, date: Date.now() });\r\n      return response;\r\n    } catch (error) {\r\n      const errorObj = handleApiError(error);\r\n      return thunkApi.rejectWithValue(errorObj);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteWaterThunk = createAsyncThunk(\r\n  \"water/deleteWater\",\r\n  async (entryId: string, thunkApi) => {\r\n    const { water } = thunkApi.getState() as RootState;\r\n\r\n    if (water.today === null) return;\r\n\r\n    const _id: string = water.today._id;\r\n\r\n    try {\r\n      const response = await deleteWaterById(_id, entryId);\r\n      return response;\r\n    } catch (error) {\r\n      const errorObj = handleApiError(error);\r\n      return thunkApi.rejectWithValue(errorObj);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateWaterByIdThunk = createAsyncThunk(\r\n  \"water/updateEntryWater\",\r\n  async (data: { entryId: string; body: IDdailyEntry }, thunkApi) => {\r\n    const { entryId, body } = data;\r\n\r\n    const { water } = thunkApi.getState() as RootState;\r\n\r\n    if (water.today === null) return;\r\n\r\n    const _id: string = water.today._id;\r\n\r\n    try {\r\n      const response = await updateWaterById(_id, entryId, body);\r\n      return response;\r\n    } catch (error) {\r\n      const errorObj = handleApiError(error);\r\n      return thunkApi.rejectWithValue(errorObj);\r\n    }\r\n  }\r\n);\r\n\r\nexport const getAllWaterForTodayThunk = createAsyncThunk(\r\n  \"water/getTodayWater\",\r\n  async (_, thunkApi) => {\r\n    try {\r\n      const response = await getAllWaterForToday();\r\n      return response;\r\n    } catch (error) {\r\n      const errorObj = handleApiError(error);\r\n      return thunkApi.rejectWithValue(errorObj);\r\n    }\r\n  }\r\n);\r\n\r\nexport const getAllWaterForMonthThunk = createAsyncThunk(\r\n  \"water/getMonthWater\",\r\n  async (data: { year: string; month: string }, thunkApi) => {\r\n    const { year, month } = data;\r\n    try {\r\n      const response = await getAllWaterForMonth(year, month);\r\n      return response;\r\n    } catch (error) {\r\n      const errorObj = handleApiError(error);\r\n      return thunkApi.rejectWithValue(errorObj);\r\n    }\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AAEnD,SACEC,QAAQ,EACRC,eAAe,EACfC,mBAAmB,EACnBC,eAAe,EACfC,mBAAmB,QACd,yBAAyB;AAChC,SAASC,cAAc,QAAQ,+BAA+B;AAK9D,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CAC3C,gBAAgB,EAChB,OAAOQ,QAAsB,EAAEC,QAAQ,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACO,QAAQ,CAAC;IACzC;IACA,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,QAAQ,GAAGN,cAAc,CAACK,KAAK,CAAC;IACtC,OAAOF,QAAQ,CAACI,eAAe,CAACD,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGd,gBAAgB,CAC9C,mBAAmB,EACnB,OAAOe,OAAe,EAAEN,QAAQ,KAAK;EACnC,MAAM;IAAEO;EAAM,CAAC,GAAGP,QAAQ,CAACQ,QAAQ,CAAC,CAAc;EAElD,IAAID,KAAK,CAACE,KAAK,KAAK,IAAI,EAAE;EAE1B,MAAMC,GAAW,GAAGH,KAAK,CAACE,KAAK,CAACC,GAAG;EAEnC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMR,eAAe,CAACiB,GAAG,EAAEJ,OAAO,CAAC;IACpD,OAAOL,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,QAAQ,GAAGN,cAAc,CAACK,KAAK,CAAC;IACtC,OAAOF,QAAQ,CAACI,eAAe,CAACD,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAGpB,gBAAgB,CAClD,wBAAwB,EACxB,OAAOqB,IAA6C,EAAEZ,QAAQ,KAAK;EACjE,MAAM;IAAEM,OAAO;IAAEO;EAAK,CAAC,GAAGD,IAAI;EAE9B,MAAM;IAAEL;EAAM,CAAC,GAAGP,QAAQ,CAACQ,QAAQ,CAAC,CAAc;EAElD,IAAID,KAAK,CAACE,KAAK,KAAK,IAAI,EAAE;EAE1B,MAAMC,GAAW,GAAGH,KAAK,CAACE,KAAK,CAACC,GAAG;EAEnC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMN,eAAe,CAACe,GAAG,EAAEJ,OAAO,EAAEO,IAAI,CAAC;IAC1D,OAAOZ,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,QAAQ,GAAGN,cAAc,CAACK,KAAK,CAAC;IACtC,OAAOF,QAAQ,CAACI,eAAe,CAACD,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAMW,wBAAwB,GAAGvB,gBAAgB,CACtD,qBAAqB,EACrB,OAAOwB,CAAC,EAAEf,QAAQ,KAAK;EACrB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,mBAAmB,CAAC,CAAC;IAC5C,OAAOO,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,QAAQ,GAAGN,cAAc,CAACK,KAAK,CAAC;IACtC,OAAOF,QAAQ,CAACI,eAAe,CAACD,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC;AAED,OAAO,MAAMa,wBAAwB,GAAGzB,gBAAgB,CACtD,qBAAqB,EACrB,OAAOqB,IAAqC,EAAEZ,QAAQ,KAAK;EACzD,MAAM;IAAEiB,IAAI;IAAEC;EAAM,CAAC,GAAGN,IAAI;EAC5B,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAML,mBAAmB,CAACqB,IAAI,EAAEC,KAAK,CAAC;IACvD,OAAOjB,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,QAAQ,GAAGN,cAAc,CAACK,KAAK,CAAC;IACtC,OAAOF,QAAQ,CAACI,eAAe,CAACD,QAAQ,CAAC;EAC3C;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module"}