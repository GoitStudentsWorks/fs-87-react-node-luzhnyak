{"ast":null,"code":"import { createSlice, isAnyOf } from \"@reduxjs/toolkit\";\nimport { addWaterThunk, deleteWaterThunk, getAllWaterForTodayThunk, updateWaterByIdThunk, getAllWaterForMonthThunk } from \"./operations\";\nconst waterInitialState = {\n  today: null,\n  itemsPerMonth: [],\n  isLoading: false,\n  error: null\n};\n\n// const handlePending = (state: IWaterInitialState): void => {\n//   state.isLoading = true;\n//   state.error = null;\n// };\n\n// const handleRejected = (\n//   state: IWaterInitialState,\n//   action: PayloadAction<any>\n// ): void => {\n//   state.isLoading = false;\n//   state.error = action.payload;\n// };\n\nconst waterSlice = createSlice({\n  name: \"water\",\n  initialState: waterInitialState,\n  reducers: {\n    // redusers\n  },\n  extraReducers: builder => builder.addCase(addWaterThunk.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.error = null;\n    state.today = action.payload;\n  }).addCase(deleteWaterThunk.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.error = null;\n    state.today = action.payload;\n\n    //    const index = state.items.findIndex(\n    //      entry => entry.id === action.payload.id\n    //    );\n    //    state.items.splice(index, 1);\n  }).addCase(getAllWaterForTodayThunk.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.error = null;\n    state.today = action.payload;\n  }).addCase(updateWaterByIdThunk.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.error = null;\n    state.today = action.payload;\n  }).addCase(getAllWaterForMonthThunk.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.error = null;\n    state.itemsPerMonth = action.payload;\n  }).addMatcher(isAnyOf(addWaterThunk.pending, deleteWaterThunk.pending, getAllWaterForTodayThunk.pending, updateWaterByIdThunk.pending, getAllWaterForMonthThunk.pending),\n  // handlePending\n  state => {\n    state.isLoading = true;\n    state.error = null;\n  }).addMatcher(isAnyOf(addWaterThunk.rejected, deleteWaterThunk.rejected, getAllWaterForTodayThunk.rejected, updateWaterByIdThunk.rejected, getAllWaterForMonthThunk.rejected),\n  // handleRejected\n  (state, action) => {\n    state.isLoading = false;\n    state.error = action.payload;\n  })\n});\nexport const waterReducer = waterSlice.reducer;","map":{"version":3,"names":["createSlice","isAnyOf","addWaterThunk","deleteWaterThunk","getAllWaterForTodayThunk","updateWaterByIdThunk","getAllWaterForMonthThunk","waterInitialState","today","itemsPerMonth","isLoading","error","waterSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","addMatcher","pending","rejected","waterReducer","reducer"],"sources":["D:/Web/aqua-frontend/src/redux/waterConsumption/slice.ts"],"sourcesContent":["import { createSlice, isAnyOf } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addWaterThunk,\r\n  deleteWaterThunk,\r\n  getAllWaterForTodayThunk,\r\n  updateWaterByIdThunk,\r\n  getAllWaterForMonthThunk,\r\n} from \"./operations\";\r\nimport { IDdailyEntry, IWater } from \"../../types\";\r\n\r\nexport interface IWaterInitialState {\r\n  today: IWater | null;\r\n  itemsPerMonth: IWater[];\r\n  isLoading: boolean;\r\n  error: Error | any;\r\n}\r\n\r\nconst waterInitialState: IWaterInitialState = {\r\n  today: null,\r\n  itemsPerMonth: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\n// const handlePending = (state: IWaterInitialState): void => {\r\n//   state.isLoading = true;\r\n//   state.error = null;\r\n// };\r\n\r\n// const handleRejected = (\r\n//   state: IWaterInitialState,\r\n//   action: PayloadAction<any>\r\n// ): void => {\r\n//   state.isLoading = false;\r\n//   state.error = action.payload;\r\n// };\r\n\r\nconst waterSlice = createSlice({\r\n  name: \"water\",\r\n  initialState: waterInitialState,\r\n  reducers: {\r\n    // redusers\r\n  },\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(addWaterThunk.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = null;\r\n        state.today = action.payload;\r\n      })\r\n      .addCase(deleteWaterThunk.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = null;\r\n        state.today = action.payload;\r\n\r\n        //    const index = state.items.findIndex(\r\n        //      entry => entry.id === action.payload.id\r\n        //    );\r\n        //    state.items.splice(index, 1);\r\n      })\r\n      .addCase(getAllWaterForTodayThunk.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = null;\r\n        state.today = action.payload;\r\n      })\r\n      .addCase(updateWaterByIdThunk.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = null;\r\n        state.today = action.payload;\r\n      })\r\n      .addCase(getAllWaterForMonthThunk.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = null;\r\n        state.itemsPerMonth = action.payload;\r\n      })\r\n      .addMatcher(\r\n        isAnyOf(\r\n          addWaterThunk.pending,\r\n          deleteWaterThunk.pending,\r\n          getAllWaterForTodayThunk.pending,\r\n          updateWaterByIdThunk.pending,\r\n          getAllWaterForMonthThunk.pending\r\n        ),\r\n        // handlePending\r\n        (state) => {\r\n          state.isLoading = true;\r\n          state.error = null;\r\n        }\r\n      )\r\n      .addMatcher(\r\n        isAnyOf(\r\n          addWaterThunk.rejected,\r\n          deleteWaterThunk.rejected,\r\n          getAllWaterForTodayThunk.rejected,\r\n          updateWaterByIdThunk.rejected,\r\n          getAllWaterForMonthThunk.rejected\r\n        ),\r\n        // handleRejected\r\n        (state, action) => {\r\n          state.isLoading = false;\r\n          state.error = action.payload;\r\n        }\r\n      ),\r\n});\r\n\r\nexport const waterReducer = waterSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}