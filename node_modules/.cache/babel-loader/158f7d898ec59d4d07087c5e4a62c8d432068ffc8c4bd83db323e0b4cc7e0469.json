{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\aqua-frontend\\\\src\\\\components\\\\DailyNorma\\\\DailyNormaModal.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport css from './DailyNormaModal.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateWaterNormaThunk } from '../../redux/auth/operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { selectWaterRate } from '../../redux/auth/selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DailyNormaModal = ({\n  setVisible,\n  onWaterAmountSave\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  let waterRate = useSelector(selectWaterRate) / 1000 || 2.0;\n  const [userData, setUserData] = useState({\n    gender: 'female',\n    weight: '',\n    activityTime: '',\n    waterAmount: ''\n  });\n  const initialValues = {\n    gender: 'female',\n    weight: '',\n    activityTime: '',\n    waterAmount: waterRate.toString()\n  };\n  const validationSchema = Yup.object({\n    weight: Yup.number().min(1, 'Min weight amount is 1'),\n    activityTime: Yup.number().min(0, 'Min weight amount is 0'),\n    waterAmount: Yup.number().required('WaterAmount is required.').min(0, 'Min water amount is 0 L').max(15, 'Max water amount is 15 L  ')\n  });\n  const [neededWaterAmount, setNeededWaterAmount] = useState(2.0);\n  useEffect(() => {\n    // Set the initial value for waterAmount when the component mounts\n    setUserData(prevData => ({\n      ...prevData,\n      waterAmount: waterRate.toString()\n    }));\n  }, [waterRate]);\n\n  // Recalculate neededWaterAmount when gender changes\n  useEffect(() => {\n    const calculatedWaterAmount = calculateWaterAmount(userData.gender, userData.weight, userData.activityTime);\n    setNeededWaterAmount(calculatedWaterAmount);\n  }, [userData.gender, userData.weight, userData.activityTime]);\n  const calculateWaterAmount = (gender, weight, activityTime) => {\n    if (gender === 'female') {\n      return (weight * 0.03 + activityTime * 0.4).toFixed(1);\n    } else {\n      return (weight * 0.03 + activityTime * 0.6).toFixed(1);\n    }\n  };\n  const onSubmit = (values, {\n    resetForm\n  }) => {\n    setUserData(prevData => ({\n      ...prevData,\n      waterAmount: values.waterAmount\n    }));\n    const waterAmount = values.waterAmount;\n    const calculatedWaterAmount = calculateWaterAmount(values.gender, values.weight, values.activityTime);\n    setNeededWaterAmount(calculatedWaterAmount);\n    onWaterAmountSave(parseFloat(waterAmount) * 1000);\n    dispatch(updateWaterNormaThunk(waterAmount * 1000));\n    setVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.formTitle,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: css.forField,\n        children: [\"For girl:\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.formulaField,\n          children: \"V=(M*0,03) + (T*0,4)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: css.forField,\n        children: [\"For man:\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.formulaField,\n          children: \"V=(M*0,04) + (T*0,6)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.formulaDescContainer,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: css.formulaDesc,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.formulaDescSymbol,\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), \"V is the volume of the water norm in liters per day, M is your body weight, T is the time of active sports, or another type of activity commensurate in terms of loads (in the absence of these, you must set 0)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      children: ({\n        values,\n        errors,\n        touched,\n        setFieldValue\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: css.formName,\n          children: \"Calculate your rate:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: css.chooseGender,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: css.radioLabel,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              className: css.formRadioInput,\n              type: \"radio\",\n              name: \"gender\",\n              value: \"female\",\n              checked: values.gender === 'female',\n              onChange: event => {\n                setFieldValue('gender', event.target.value);\n                const {\n                  name,\n                  value\n                } = event.target;\n                setUserData(prevData => ({\n                  ...prevData,\n                  [name]: value\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), \"For woman\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: css.radioLabel,\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              className: css.formRadioInput,\n              type: \"radio\",\n              name: \"gender\",\n              value: \"male\",\n              checked: values.gender === 'male',\n              onChange: event => {\n                setFieldValue('gender', event.target.value);\n                const {\n                  name,\n                  value\n                } = event.target;\n                setUserData(prevData => ({\n                  ...prevData,\n                  [name]: value\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), \"For man\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: css.questionContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: css.questionLabel,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: css.questionText,\n              children: \"Your weight in kilograms:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: `${css.questionInput}\n                ${errors.weight && touched.weight ? css.errorBorder : ''} ${errors.weight && touched.weight ? css.errorInput : ''}\n                `,\n              type: \"text\",\n              name: \"weight\",\n              value: values.weight,\n              onChange: event => {\n                setFieldValue('weight', event.target.value);\n                const {\n                  name,\n                  value\n                } = event.target;\n                setUserData(prevData => ({\n                  ...prevData,\n                  [name]: value\n                }));\n                if (name === 'weight' || name === 'activityTime') {\n                  const calculatedWaterAmount = calculateWaterAmount(userData.gender, name === 'weight' ? value : userData.weight, name === 'activityTime' ? value : userData.activityTime);\n                  setNeededWaterAmount(calculatedWaterAmount);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"weight\",\n              component: \"div\",\n              className: css.errormessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: css.questionLabel,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: css.questionText,\n              children: \"The time of active participation in sports or other activities with a high physical. load in hours:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: `${css.questionInput}\n                ${errors.activityTime && touched.activityTime ? css.errorBorder : ''} ${errors.activityTime && touched.activityTime ? css.errorInput : ''}\n                `,\n              type: \"text\",\n              name: \"activityTime\",\n              value: values.activityTime,\n              onChange: event => {\n                setFieldValue('activityTime', event.target.value);\n                const {\n                  name,\n                  value\n                } = event.target;\n                setUserData(prevData => ({\n                  ...prevData,\n                  [name]: value\n                }));\n                if (name === 'weight' || name === 'activityTime') {\n                  const calculatedWaterAmount = calculateWaterAmount(userData.gender, name === 'weight' ? value : userData.weight, name === 'activityTime' ? value : userData.activityTime);\n                  setNeededWaterAmount(calculatedWaterAmount);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"activityTime\",\n              component: \"div\",\n              className: css.errormessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: css.requiredAmountContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: css.requiredAmountText,\n            children: \"The required amount of water in liters per day:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"neededWaterAmount\",\n            className: css.requiredAmountValue,\n            onClick: () => {\n              const newWaterAmount = parseFloat(neededWaterAmount).toFixed(1);\n              setFieldValue('waterAmount', newWaterAmount);\n              setUserData(prevData => ({\n                ...prevData,\n                waterAmount: newWaterAmount\n              }));\n            },\n            children: [neededWaterAmount, \" L\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: css.questionLabel,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: css.howMuchText,\n            children: \"Write down how much water you will drink:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            className: `${css.questionInput}\n                ${errors.waterAmount && touched.waterAmount ? css.errorBorder : ''} ${errors.waterAmount && touched.waterAmount ? css.errorInput : ''}\n                `,\n            type: \"text\",\n            name: \"waterAmount\",\n            value: values.waterAmount,\n            onChange: event => {\n              setFieldValue('waterAmount', event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"waterAmount\",\n            component: \"div\",\n            className: css.errormessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: css.submitButton,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyNormaModal, \"tOKUn1xwHyFwNo30GEjwkHY9N3Y=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = DailyNormaModal;\nexport default DailyNormaModal;\nvar _c;\n$RefreshReg$(_c, \"DailyNormaModal\");","map":{"version":3,"names":["useEffect","useState","css","useDispatch","useSelector","updateWaterNormaThunk","Formik","Form","Field","ErrorMessage","Yup","selectWaterRate","jsxDEV","_jsxDEV","DailyNormaModal","setVisible","onWaterAmountSave","_s","dispatch","waterRate","userData","setUserData","gender","weight","activityTime","waterAmount","initialValues","toString","validationSchema","object","number","min","required","max","neededWaterAmount","setNeededWaterAmount","prevData","calculatedWaterAmount","calculateWaterAmount","toFixed","onSubmit","values","resetForm","parseFloat","className","container","children","formTitle","forField","formulaField","fileName","_jsxFileName","lineNumber","columnNumber","formulaDescContainer","formulaDesc","formulaDescSymbol","errors","touched","setFieldValue","formName","chooseGender","radioLabel","formRadioInput","type","name","value","checked","onChange","event","target","questionContainer","questionLabel","questionText","questionInput","errorBorder","errorInput","component","errormessage","requiredAmountContainer","requiredAmountText","id","requiredAmountValue","onClick","newWaterAmount","howMuchText","submitButton","_c","$RefreshReg$"],"sources":["D:/Web/aqua-frontend/src/components/DailyNorma/DailyNormaModal.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport css from './DailyNormaModal.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateWaterNormaThunk } from '../../redux/auth/operations';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { selectWaterRate } from '../../redux/auth/selectors';\r\n\r\nconst DailyNormaModal = ({ setVisible, onWaterAmountSave }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  let waterRate = useSelector(selectWaterRate) / 1000 || 2.0;\r\n\r\n  const [userData, setUserData] = useState({\r\n    gender: 'female',\r\n    weight: '',\r\n    activityTime: '',\r\n    waterAmount: '',\r\n  });\r\n\r\n  const initialValues = {\r\n    gender: 'female',\r\n    weight: '',\r\n    activityTime: '',\r\n    waterAmount: waterRate.toString(),\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    weight: Yup.number().min(1, 'Min weight amount is 1'),\r\n    activityTime: Yup.number().min(0, 'Min weight amount is 0'),\r\n    waterAmount: Yup.number()\r\n      .required('WaterAmount is required.')\r\n      .min(0, 'Min water amount is 0 L')\r\n      .max(15, 'Max water amount is 15 L  '),\r\n  });\r\n\r\n  const [neededWaterAmount, setNeededWaterAmount] = useState(2.0);\r\n\r\n\r\n  useEffect(() => {\r\n    // Set the initial value for waterAmount when the component mounts\r\n    setUserData(prevData => ({\r\n      ...prevData,\r\n      waterAmount: waterRate.toString(),\r\n    }));\r\n  }, [waterRate]);\r\n\r\n  // Recalculate neededWaterAmount when gender changes\r\n  useEffect(() => {\r\n    const calculatedWaterAmount = calculateWaterAmount(\r\n      userData.gender,\r\n      userData.weight,\r\n      userData.activityTime\r\n    );\r\n    setNeededWaterAmount(calculatedWaterAmount);\r\n  }, [userData.gender, userData.weight, userData.activityTime]);\r\n\r\n  const calculateWaterAmount = (gender, weight, activityTime) => {\r\n    if (gender === 'female') {\r\n      return (weight * 0.03 + activityTime * 0.4).toFixed(1);\r\n    } else {\r\n      return (weight * 0.03 + activityTime * 0.6).toFixed(1);\r\n    }\r\n  };  \r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    setUserData(prevData => ({\r\n      ...prevData,\r\n      waterAmount: values.waterAmount,\r\n    }));\r\n\r\n    const waterAmount = values.waterAmount;\r\n\r\n    const calculatedWaterAmount = calculateWaterAmount(\r\n      values.gender,\r\n      values.weight,\r\n      values.activityTime\r\n    );\r\n\r\n    setNeededWaterAmount(calculatedWaterAmount);\r\n\r\n    onWaterAmountSave(parseFloat(waterAmount) * 1000);\r\n\r\n    dispatch(updateWaterNormaThunk(waterAmount * 1000));\r\n\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className={css.container}>\r\n      <div className={css.formTitle}>\r\n        <p className={css.forField}>\r\n          For girl:{' '}\r\n          <span className={css.formulaField}>V=(M*0,03) + (T*0,4)</span>\r\n        </p>\r\n        <p className={css.forField}>\r\n          For man:{' '}\r\n          <span className={css.formulaField}>V=(M*0,04) + (T*0,6)</span>\r\n        </p>\r\n      </div>\r\n\r\n      <div className={css.formulaDescContainer}>\r\n        <p className={css.formulaDesc}>\r\n          <span className={css.formulaDescSymbol}>*</span>V is the volume of the\r\n          water norm in liters per day, M is your body weight, T is the time of\r\n          active sports, or another type of activity commensurate in terms of\r\n          loads (in the absence of these, you must set 0)\r\n        </p>\r\n      </div>\r\n\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({ values, errors, touched, setFieldValue }) => (\r\n          <Form>\r\n            <h3 className={css.formName}>Calculate your rate:</h3>\r\n            <div className={css.chooseGender}>\r\n              <label className={css.radioLabel}>\r\n                <Field\r\n                  className={css.formRadioInput}\r\n                  type=\"radio\"\r\n                  name=\"gender\"\r\n                  value=\"female\"\r\n                  checked={values.gender === 'female'}\r\n                  onChange={event => {\r\n                    setFieldValue('gender', event.target.value);\r\n                    const { name, value } = event.target;\r\n                    setUserData(prevData => ({\r\n                      ...prevData,\r\n                      [name]: value,\r\n                    }));\r\n                  }}\r\n                />\r\n                For woman\r\n              </label>\r\n\r\n              <label className={css.radioLabel}>\r\n                <Field\r\n                  className={css.formRadioInput}\r\n                  type=\"radio\"\r\n                  name=\"gender\"\r\n                  value=\"male\"\r\n                  checked={values.gender === 'male'}\r\n                  onChange={event => {\r\n                    setFieldValue('gender', event.target.value);\r\n                    const { name, value } = event.target;\r\n                    setUserData(prevData => ({\r\n                      ...prevData,\r\n                      [name]: value,\r\n                    }));\r\n                  }}\r\n                />\r\n                For man\r\n              </label>\r\n            </div>\r\n\r\n            <div className={css.questionContainer}>\r\n              <label className={css.questionLabel}>\r\n                <span className={css.questionText}>\r\n                  Your weight in kilograms:\r\n                </span>\r\n                <Field\r\n                  className={`${css.questionInput}\r\n                ${errors.weight && touched.weight ? css.errorBorder : ''} ${\r\n                    errors.weight && touched.weight ? css.errorInput : ''\r\n                  }\r\n                `}\r\n                  type=\"text\"\r\n                  name=\"weight\"\r\n                  value={values.weight}\r\n                  onChange={event => {\r\n                    setFieldValue('weight', event.target.value);\r\n                    const { name, value } = event.target;\r\n                    setUserData(prevData => ({\r\n                      ...prevData,\r\n                      [name]: value,\r\n                    }));\r\n\r\n                    if (name === 'weight' || name === 'activityTime') {\r\n                      const calculatedWaterAmount = calculateWaterAmount(\r\n                        userData.gender,\r\n                        name === 'weight' ? value : userData.weight,\r\n                        name === 'activityTime' ? value : userData.activityTime\r\n                      );\r\n                      setNeededWaterAmount(calculatedWaterAmount);\r\n                    }\r\n                  }}\r\n                />\r\n\r\n                <ErrorMessage\r\n                  name=\"weight\"\r\n                  component=\"div\"\r\n                  className={css.errormessage}\r\n                />\r\n              </label>\r\n\r\n              <label className={css.questionLabel}>\r\n                <span className={css.questionText}>\r\n                  The time of active participation in sports or other activities\r\n                  with a high physical. load in hours:\r\n                </span>\r\n                <Field\r\n                  className={`${css.questionInput}\r\n                ${\r\n                  errors.activityTime && touched.activityTime\r\n                    ? css.errorBorder\r\n                    : ''\r\n                } ${\r\n                    errors.activityTime && touched.activityTime\r\n                      ? css.errorInput\r\n                      : ''\r\n                  }\r\n                `}\r\n                  type=\"text\"\r\n                  name=\"activityTime\"\r\n                  value={values.activityTime}\r\n                  onChange={event => {\r\n                    setFieldValue('activityTime', event.target.value);\r\n                    const { name, value } = event.target;\r\n                    setUserData(prevData => ({\r\n                      ...prevData,\r\n                      [name]: value,\r\n                    }));\r\n\r\n                    if (name === 'weight' || name === 'activityTime') {\r\n                      const calculatedWaterAmount = calculateWaterAmount(\r\n                        userData.gender,\r\n                        name === 'weight' ? value : userData.weight,\r\n                        name === 'activityTime' ? value : userData.activityTime\r\n                      );\r\n                      setNeededWaterAmount(calculatedWaterAmount);\r\n                    }\r\n                  }}\r\n                />\r\n                <ErrorMessage\r\n                  name=\"activityTime\"\r\n                  component=\"div\"\r\n                  className={css.errormessage}\r\n                />\r\n              </label>\r\n            </div>\r\n\r\n            <div className={css.requiredAmountContainer}>\r\n              <p className={css.requiredAmountText}>\r\n                The required amount of water in liters per day:\r\n              </p>\r\n              <p\r\n                id=\"neededWaterAmount\"\r\n                className={css.requiredAmountValue}\r\n                onClick={() => {\r\n                  const newWaterAmount = parseFloat(neededWaterAmount).toFixed(1);\r\n                  \r\n                  setFieldValue('waterAmount', newWaterAmount);\r\n                \r\n                  setUserData(prevData => ({\r\n                    ...prevData,\r\n                    waterAmount: newWaterAmount,\r\n                  }));\r\n                }}\r\n              >\r\n                {neededWaterAmount} L\r\n              </p>\r\n            </div>\r\n\r\n            <label className={css.questionLabel}>\r\n              <span className={css.howMuchText}>\r\n                Write down how much water you will drink:\r\n              </span>\r\n              <Field\r\n                className={`${css.questionInput}\r\n                ${\r\n                  errors.waterAmount && touched.waterAmount\r\n                    ? css.errorBorder\r\n                    : ''\r\n                } ${\r\n                  errors.waterAmount && touched.waterAmount\r\n                    ? css.errorInput\r\n                    : ''\r\n                }\r\n                `}\r\n                type=\"text\"\r\n                name=\"waterAmount\"\r\n                value={values.waterAmount}\r\n                onChange={event => {\r\n                  setFieldValue('waterAmount', event.target.value);\r\n                }}\r\n              />\r\n              <ErrorMessage\r\n                name=\"waterAmount\"\r\n                component=\"div\"\r\n                className={css.errormessage}\r\n              />\r\n            </label>\r\n\r\n            <button type=\"submit\" className={css.submitButton}>\r\n              Save\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyNormaModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}